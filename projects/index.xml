<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Unique Divine - Home</title>
    <link>https://unique-divine.github.io/projects/</link>
    <description>Recent content in Projects on Unique Divine - Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate>
    
	<atom:link href="https://unique-divine.github.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Banknote Fraud Classification - Decision Trees from Scratch</title>
      <link>https://unique-divine.github.io/projects/banknote-fraud/</link>
      <pubDate>Mon, 01 Jun 2020 11:00:59 -0400</pubDate>
      
      <guid>https://unique-divine.github.io/projects/banknote-fraud/</guid>
      <description>Overview: The goal of this project was to get practice writing a decision tree from scratch. I figured that this could serve as an effective technical exercise.
Data Description: Extracted from images were taken from genuine and forged banknote-like specimens. For digitization, an industrial camera usually used for print inspection was used. The final images have 400x 400 pixels. Due to the object lens and distance to the investigated object gray-scale pictures with a resolution of about 660 dpi were gained.</description>
    </item>
    
    <item>
      <title>Neural Networks for Gravitational Lens Modeling</title>
      <link>https://unique-divine.github.io/projects/neural-networks-for-gravitational-lens-modeling/</link>
      <pubDate>Mon, 01 Jun 2020 11:13:32 -0400</pubDate>
      
      <guid>https://unique-divine.github.io/projects/neural-networks-for-gravitational-lens-modeling/</guid>
      <description>Overview: This code uses convolutional neural networks (with TensorFlow) to estimate the parameters of strong gravitational lenses.
Link to the repository:
How to use the code: The best place to start is the Jupyter notebook. It has a quick demonstration of lens modeling with neural networks. This is what you need.
1. Software needed:  Python 3 Tensorflow 1.1x.  I used pip to install this. Going to (https://www.tensorflow.org/install/) might be helpful.</description>
    </item>
    
    <item>
      <title>CTR-Prediction-with-Stochastic-Gradient-Descent</title>
      <link>https://unique-divine.github.io/projects/ctr-prediction-with-stochastic-gradient-descent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://unique-divine.github.io/projects/ctr-prediction-with-stochastic-gradient-descent/</guid>
      <description>Overview: The goal of this project is to predict whether a dataset of advertisements will be clicked or not. In solving this problem, I use a stochastic gradient descent algorithm called Pegasos, which is commonly used for click-through rate (CTR) predictions.
If you only want to read the notebook without downloading anything, here&amp;rsquo;s a link to nbviewer: CTR-Prediction-with-Stochastic-Gradient-Descent.ipynb
Contents:  Dataset Description Jupyter Notebook Contents Demo / Usage Instructions   1.</description>
    </item>
    
  </channel>
</rss>